import os

from functools import lru_cache
from pydantic import BaseSettings
from typing import List


class Config(BaseSettings):
    app_name: str = "FAIR Combine API"
    backend_url = os.environ.get("BACKEND_URL", "localhost")
    backend_port = os.environ.get("BACKEND_PORT", 8000)
    redis_url = os.environ.get("REDIS_URL", "localhost")
    redis_port = os.environ.get("REDIS_PORT", 6379)
    redis_db_number: int = 0
    indicators_path = "app/metrics/metrics.csv"  #this loads the indicators
    celery_broker = os.environ.get(
        "CELERY_BROKER_URL", f"redis://{redis_url}:{redis_port}/{redis_db_number}"
    )
    celery_key = os.environ.get("CELERY_SECRET_KEY")  # KEEP HIDDEN
    if not celery_key:
        raise ValueError("A secret key is necessary for celery to interact with the application")

    allowed_origins: List[str] = []
    # List of indicators that applied to archive (if no archive, their statuses will be set to 'failed')
    archive_indicators: List[str] = [
        "CA-RDA-F1-01Archive",
        "CA-RDA-F1-02Archive",
        "CA-RDA-A1-02Archive",
        "CA-RDA-A1-03Archive",
        "CA-RDA-A1-04Archive",
        "CA-RDA-A1-05Archive",
        "CA-RDA-A1.1-01Archive",
        "CA-RDA-A1.2-01Archive",
        "CA-RDA-I1-01Archive",
        "CA-RDA-I1-02Archive",
        "CA-RDA-I2-01Archive",
        "CA-RDA-I3-01Archive",
        "CA-RDA-I3-02Archive",
        "CA-RDA-R1.3-01Archive",
        "CA-RDA-R1.3-02Archive",
    ]

    # List of indicators that applied to archive metadata (if no archive, their statuses will be set to 'failed')
    archive_metadata_indicators: List[str] = [
        "CA-RDA-F1-01MA",
        "CA-RDA-F1-02MA",
        "CA-RDA-F2-01MA",
        "CA-RDA-F3-01MA",
        "CA-RDA-F4-01MA",
        "CA-RDA-A1-01MA",
        "CA-RDA-A1-02MA",
        "CA-RDA-A1-03MA",
        "CA-RDA-A1-04MA",
        "CA-RDA-A1.1-01MA",
        "CA-RDA-A2-01MA",
        "CA-RDA-I1-01MA",
        "CA-RDA-I1-02MA",
        "CA-RDA-I2-01MA",
        "CA-RDA-I3-01MA",
        "CA-RDA-I3-02MA",
        "CA-RDA-I3-03MA",
        "CA-RDA-I3-04MA",
        "CA-RDA-R1-01MA",
        "CA-RDA-R1.1-01MA",
        "CA-RDA-R1.1-02MA",
        "CA-RDA-R1.1-03MA",
        "CA-RDA-R1.2-01MA",
        "CA-RDA-R1.2-02MA",
        "CA-RDA-R1.3-01MA",
        "CA-RDA-R1.3-02MA",
        "CA-RDA-R1.3-03MA",
    ]
    
    # Mapping of the indicators that can be automatically set if the metadata is from CSH
    csh_metadata_status: dict[str, str] = {
        "CSH-RDA-F1-01M": "success",
        "CSH-RDA-F2-01M": "success",
        "CSH-RDA-F3-01M": "failed",
        "CSH-RDA-F4-01M": "success",
        "CSH-RDA-A1-02M": "success",
        "CSH-RDA-A1-03M": "success",
        "CSH-RDA-A1-04M": "success",
        "CSH-RDA-A1.1-01M": "success",
        "CSH-RDA-A2-01M": "warnings",
        "CSH-RDA-I1-01M": "success",
        "CSH-RDA-I1-02M": "success",
        "CSH-RDA-I2-01M": "success",
        "CSH-RDA-R1-01M": "warnings", #this indicator should be adapted in more detail before implementing
        "CSH-RDA-R1.2-01M": "failed", #re-evaluate if provenence can be used better in CSH at the moment
        "CSH-RDA-R1.2-02M": "failed", #re-evaluate if provenence can be used better in CSH at the moment
        "CSH-RDA-R1.1-03M": "failed",
        "CSH-RDA-R1.3-01M": "success",
        "CSH-RDA-R1.3-02M": "success"
    }

    # Mapping of indicators and their status that can be automatically set if data is stored in BioModel
    biomodel_assessment_status: dict[str, str] = {
        "CA-RDA-F1-01Archive": "failed",
        "CA-RDA-F1-01MA": "failed",
        "CA-RDA-A1-01MA": "not_applicable",
        "CA-RDA-A1-04Archive": "success",
        "CA-RDA-A1-04Model": "success",
        "CA-RDA-A1-04MA": "success",
        "CA-RDA-A1-05Model": "success",
        "CA-RDA-A1.1-01Model": "success",
        "CA-RDA-A1.1-01MA": "success",
        "CA-RDA-A1.2-01Archive": "success",
        "CA-RDA-A1.2-01Model": "success",
        "CA-RDA-R1.1-01MA": "success",
        "CA-RDA-R1.1-01MM": "success",
        "CA-RDA-R1.1-02MM": "success",
        "CA-RDA-R1.1-03MM": "success",
    }

    # Mapping of indicators and their status that can be automatically set if data is stored in PMR
    pmr_indicator_status: dict[str, str] = {}

    # Mapping of indicators with their direct parent. Until parent status is 'success', children cannot be set.
    # Not happy with this, as it means that the Config is dynamically set
    assessment_dependencies: dict[str, dict] = {
        "CA-RDA-I3-02Archive": {
            "condition": "or",
            "indicators": ["CA-RDA-I3-01Archive"],
        },
        "CA-RDA-I3-02Model": {"condition": "or", "indicators": ["CA-RDA-I3-01Model"]},
        "CA-RDA-I3-03MA": {"condition": "or", "indicators": ["CA-RDA-I3-01MA"]},
        "CA-RDA-I3-03MM": {"condition": "or", "indicators": ["CA-RDA-I3-01MM"]},
        "CA-RDA-I3-04MA": {"condition": "or", "indicators": ["CA-RDA-I3-02MA"]},
        "CA-RDA-I3-04MM": {"condition": "or", "indicators": ["CA-RDA-I3-02MM"]},
        "CA-RDA-R1.1-02MA": {"condition": "or", "indicators": ["CA-RDA-R1.1-01MA"]},
        "CA-RDA-R1.1-03MA": {"condition": "or", "indicators": ["CA-RDA-R1.1-01MA"]},
        "CSH-RDA-R1.1-02M": {"condition": "or", "indicators": ["CSH-RDA-R1.1-01M"]},
        "CSH-RDA-R1.1-03M": {"condition": "or", "indicators": ["CSH-RDA-R1.1-01M"]}
    }

    automated_assessments: dict[str, str] = {
        "CA-RDA-F1-01Model": "f1_model_persistent_identifier",
        "CA-RDA-F4-01MM": "f4_model_metadata_harvestable",
        "CSH-RDA-F1-02M": "csh_f1_2_globally_unique_identifier",
        "CSH-RDA-A1-01M": "csh_a1_contains_access_information",
        "CSH-RDA-I3-01M": "csh_i3_01_ref_other_metadata",
        "CSH-RDA-I3-02M": "csh_i3_02_ref_other_data",
        "CSH-RDA-I3-03M": "csh_i3_03_qual_ref_other_metadata",
        "CSH-RDA-I3-04M": "csh_i3_04_qual_ref_other_data",
        "CSH-RDA-R1.1-01M": "csh_r1_1_01_has_reuse_license",
        "CSH-RDA-R1.1-02M": "csh_r1_1_02_has_standard_reuse_license"
    }


class DevConfig(Config):
    allowed_origins: List[str] = ["*"]
    pass


class ProdConfig(Config):
    pass


class TestConfig(Config):
    redis_db_number = 15


@lru_cache()
def get_settings():
    env = os.environ.get("FAIR_COMBINE_ENV", "dev")
    config = {"dev": DevConfig, "prod": ProdConfig, "test": TestConfig}.get(env)()
    return config
